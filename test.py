#!bin/pythion3
#
# MIT License
#
# Copyright (c) 2024 Dmitriy Nekrasov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ---------------------------------------------------------------------------------
#
# Top-level program template. Altough it is also could be wrapped up to run
# automatically in a cycle through variating set of parameters. It requires some
# modifications anyway to fit your project.
#
# -- Dmitry Nekrasov <bluebag@yandex.ru> Thu, 21 Mar 2024 21:05:25 +0300
#

import numpy as np
import sys
import os
import subprocess
cwd = os.getcwd()
relative_path_to_some_external_program = '../'
sys.path.append( cwd + relative_path_to_some_external_program )

############################################################################
# Test parameters (example)

# Mandatory parameters
DATA_WIDTH               = 16
CLK_PER_SAMPLE           = ... # How many clock cycle the design needs to prcess 1 sample
TESTBENCH_MODE           = ( "manual", "automatic" )[1]
# Design-dependent parameters
DUT_PARAMETER1           = 1
DUT_PARAMETER2           = ( "possible_value_1", "possible_value_2")[1]
...

# Could be static if project has fixed RTL files set
RTL_SOURCES = [
  '../rtl/submodule1.sv',
  '../rtl/subomdule2.sv',
  ...
]

############################################################################
# Translate config to verilog

f = open( "testbench_parameters.v", "w" )
f.write(f"parameter DATA_WIDTH        = {DATA_WIDTH};\n")
f.write(f'parameter CLK_PER_SAMPLE    = {CLK_PER_SAMPLE};\n')
f.write(f'parameter PARAMETER1        = {PARAMETER1};\n')
f.write(f'parameter TEST_DATA_FNAME   = "input.txt";\n')
f.write(f'parameter REF_DATA_FNAME    = "ref.txt";\n')
f.close()

f = open( "files", "w" )
for i in range(len(RTL_SOURCES)):
    f.write(f"{RTL_SOURCES[i]}\n")
f.close()

############################################################################
# Prepare test data

N = 100

min_val = -2**(DATA_WIDTH-1)
max_val =  2**(DATA_WIDTH-1)-1

test_data       = test_data_generator( parameters )
reference_data  = dut_model_in_python( test_data, parameters )


def wrire_tb_data( fname, values ):
    f = open( fname, "w")
    for i in range(len(values)):
        f.write( "%d\n" % values[i])
    f.close()

wrire_tb_data( "input.txt", test_data )
wrire_tb_data( "ref.txt",   reference_data )


if( TESTBENCH_MODE == "automatic" ):
    run_vsim = "vsim -c -do make.tcl"
    vsim = subprocess.Popen( run_vsim.split(), stdout=subprocess.PIPE )
    res = vsim.communicate()
    print(res)
    try:
        f = open( "score.txt", "r" )
        score = f.readlines()[0][1:-2] # cut side { }
        f.close()
    except FileNotFoundError:
        score = "No score.txt were generated by make.tcl routine"
    f = open( "log", "a" )
    f.write("------------------------------------------------------------\n")
    f.write( f"Paramters: .... ")
    f.write( f"Results: {score}\n")
    f.close()
    # clean
    try:
        os.remove("testbench_parameters.v")
        os.remove("files")
        os.remove("input.txt")
        os.remove("ref.txt")
        os.remove("score.txt")
        os.remove("transcript")
        os.remove("vsim.wlf")
        import shutil
        shutil.rmtree( "work", ignore_errors=True )
    except FileNotFoundError:
        pass






